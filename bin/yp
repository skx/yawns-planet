#!/usr/bin/perl -w -I.

=head1 NAME

yp - Create Yawns-Planet.

=head1 SYNOPSIS

  yp [options]

  General Options:

  Help Options:
   --help     Show this scripts help information.
   --manual   Read this scripts manual.
   --verbose  show sending progress.
   --version  Show the version number and exit.


=head1 OPTIONS

=over 8

=item B<--help>
Show the scripts help information.

=item B<--manual>
Read the manual.

=item B<--verbose>
Show sending progress.

=item B<--version>
Show the version number and exit.

=back


=head1 DESCRIPTION

  yp is a simple script which is designed to create a Yawns-Planet
 site.

  This is a PlanetPlanet like static listing of weblog entries
 posted by uesrs of a Yawns powered site.

=cut

=head1 TODO

  The SQL queries should use bound parameters.

=cut


=head1 AUTHOR


 Steve
 --
 http://www.steve.org.uk/

 $Id: yp,v 1.29 2007-02-06 18:15:26 steve Exp $

=cut


use strict;
use warnings;

# Modules we use.
use Date::Manip qw(ParseDate UnixDate);
use Getopt::Long;
use HTML::Entities;
use HTML::Template;
use Pod::Usage;
use POSIX qw/ strftime /;


# Custom modules
use conf::SiteConfig;
use YawnsBlog;


#
#  Options.
#
my %CONFIG;
$CONFIG{'verbose'} = 0;
$CONFIG{'version'} = '$Id: yp,v 1.29 2007-02-06 18:15:26 steve Exp $';


#
# Fix up the version
#
$CONFIG{'version'} = join (' ', (split (' ', $CONFIG{'version'}))[2..2]);
$CONFIG{'version'} =~ s/yp,v\b//;


#
#  Parse our command line arguments
#
parseCommandLineArguments();


#
# 0. Find the directory to load the tempaltes from.
#
my $TEMPLATES = get_conf( "template_dir" );
testTemplateDirectory( $TEMPLATES );



#  1. Get weblog entries.
#
$CONFIG{'verbose'} && print "Finding weblog entries\n";
my @entries = YawnsBlog::Entries( get_conf( "count" ) );
$CONFIG{'verbose'} && print "Done...\n";


#
#  2. Create output HTML
#
$CONFIG{'verbose'} && print "Creating HTML index\n";
writeHTMLIndex( @entries );
$CONFIG{'verbose'} && print "Done...\n";


#
#  3. Create output XML feeds.
#
$CONFIG{'verbose'} && print "Creating RSS 1.0 feed\n";
writeRSS10( @entries );
$CONFIG{'verbose'} && print "Done...\n";

$CONFIG{'verbose'} && print "Creating RSS 2.0 feed\n";
writeRSS20( @entries );
$CONFIG{'verbose'} && print "Done...\n";


#
#  4.  All done.
#
exit;



=begin doc

  Ensure the given templates directory exists, and that it
 contains the templates that we will expect to load from it.

=end doc

=cut

sub testTemplateDirectory
{
    my ( $directory ) = ( @_ );

    if ( ! -d $TEMPLATES )
    {
	print <<E_O_ERROR;

The templates directory you have chosen doesn't appear to exist:

  $TEMPLATES

Please update the following configuration file to correct this:

  'conf/SiteConfig.pm'

Exiting.
E_O_ERROR
	exit;
    }

    foreach my $file ( qw( index.tmpl rss10.tmpl rss20.tmpl ) )
    {
	if ( ! -e $directory . "/" . $file )
	{
	    print "Required template file '$file' not found in templates " .
	          "directory '$directory'\n";
	    exit;
	}
    }
}



=begin doc

  Write the output index.html file

=end doc

=cut

sub writeHTMLIndex
{
    my ( @entries ) = ( @_ );

    #
    # Load the template.
    #
    my $template = HTML::Template->new( filename =>  $TEMPLATES . "index.tmpl" ,
                                        loop_context_vars => 1 );

    #
    # Add the blogs and subscription information.
    #
    $template->param( 'blogs', @entries );
    $template->param( 'subscriptions', YawnsBlog::Posters() );

    my $time = strftime ("%e %B %Y - %H:%M:%S", localtime);

    #
    # Setup static parameters.
    #
    $template->param( 'title',      get_conf( 'title' ) );
    $template->param( 'title_link', get_conf( 'title_link' ) );
    $template->param( 'updated' ,   $time );
    $template->param( 'version' ,   $CONFIG{'version'} );


    #
    # Open the output file, and write the data.
    #
    my $output = get_conf( "htmlOutput" );

    open( OUTPUT, ">", $output )
	or die "Cannot open output file '$output' - $!@";
    print OUTPUT $template->output();
    close( OUTPUT );
}



=begin doc

  Write out an RSS v1.0 formatted XML file from the weblog
 entries.

  We do this cleanly setting each template loop's value
 correctly - taking care to modify the date to the appropriate
 format.

=end doc

=cut

sub writeRSS10
{
    my ( $weblogs ) = ( @_ );

    my $contents;
    my $entries;


    #
    #  get configuration values.
    #
    my $site_link  = get_conf( 'link' );
    my $site_title = get_conf( 'title' );


    #
    # Read in each available blog entry.  We don't care about
    # much of the date just:
    #
    # Username, ID, title, body, and date.
    #
    foreach my $entry ( @$weblogs )
    {
	my $title = $entry->{'title'};
	my $user  = $entry->{'user'};
	my $id    = $entry->{'id'};
	my $body  = $entry->{'body'};
	my $date  = $entry->{'date'};
	my $time  = $entry->{'time'};


	#
	#  Make sure the date is in the right format for
	# the RSS v1.0 feed.
	#
	# e.g.
	#      2005-10-11T14:39:00+00:00
	#
	my $dp  = ParseDate( $time . " " . $date );
	$date = UnixDate( $dp, "%Y-%m-%dT%H:%M:00+00:00");

	#
	#  HTML Encode the title, and body, so that it is valid XML
	#
	$title = encode_entities( $title );
	$body  = encode_entities( $body );

	push( @$contents,
	      {
		  username => $user,
		  id       => $id,
	      } );

	push( @$entries,
	      {
		  username => $user,
		  id       => $id,
		  title    => $title,
		  bodytext => $body,
		  date     => $date
		  } );

    }

    #
    # Load the template.
    #
    my $template = HTML::Template->new( filename =>  $TEMPLATES . "rss10.tmpl" );

    #
    #  Set the parameters
    #
    $template->param( "contents", $contents );
    $template->param( "blogentries", $entries );
    $template->param( site_link  => $site_link,
                      site_title => $site_title );

    #
    # Open the output file, and write the data.
    #
    my $output = get_conf( "rss1Output" );
    open( RSS10OUTPUT, ">", $output )
	or die "Cannot open output file '$output' - $!@";
    print RSS10OUTPUT $template->output();
    close( RSS10OUTPUT );
}



=begin doc

  Write out an RSS v2.0 formatted XML file from the weblog
 entries.

  We do this cleanly setting each template loop's value
 correctly - taking care to modify the date to the appropriate
 format.

=end doc

=cut

sub writeRSS20
{
    my ( $weblogs ) = ( @_ );

    #
    #  get configuration values.
    #
    my $site_link  = get_conf( 'link' );
    my $site_title = get_conf( 'title' );

    my $entries;

    #
    # Read in each available blog entry.  We don't care about
    # much of the date just:
    #
    # Username, ID, title, body, and date.
    #
    foreach my $entry ( @$weblogs )
    {
	my $title = $entry->{'title'};
	my $user  = $entry->{'user'};
	my $id    = $entry->{'id'};
	my $body  = $entry->{'body'};
	my $date  = $entry->{'date'};
	my $time  = $entry->{'time'};


	#
	#  Make sure the date is in the right format for
	# the RSS v2.0 feed.
	#
	# e.g.
	#      Sat, 10 Sep 2005 02:44:00 +0000
	#
	my $dp  = ParseDate( $time . " " . $date );
	$date = UnixDate( $dp, "%a, %d %b %Y %H:%M:%S +0000" );

	#
	#  HTML Encode the title, and body, so that it is valid XML
	#
	$title = encode_entities( $title );
	$body  = encode_entities( $body );

	push( @$entries,
	      {
		  username => $user,
		  id       => $id,
		  title    => $title,
		  bodytext => $body,
		  date     => $date
              } );

    }

    #
    # Load the template.
    #
    my $template = HTML::Template->new( filename => $TEMPLATES . "rss20.tmpl" );


    #
    #  Setup the entries.
    #
    $template->param( "entries", $entries );
    $template->param( site_link  => $site_link,
                      site_title => $site_title );
    #
    # Open the output file, and write the data.
    #
    my $output = get_conf( "rss2Output" );
    open( OUTPUT, ">", $output )
	or die "Cannot open output file '$output' - $!@";
    print OUTPUT $template->output();
    close( OUTPUT );
}




=begin doc

  Parse the arguments specified upon the command line.

=end doc

=cut

sub parseCommandLineArguments
{
    my $SHOW_HELP    = 0;
    my $SHOW_MANUAL  = 0;
    my $SHOW_VERSION = 0;

    #
    #  Parse the options we accept
    #
    GetOptions(
               "file=s",     \$CONFIG{'file'},
               "help",       \$SHOW_HELP,
               "manual",     \$SHOW_MANUAL,
               "verbose",    \$CONFIG{'verbose'},
               "version",    \$SHOW_VERSION,
             );

    pod2usage(1)              if ( $SHOW_HELP   );
    pod2usage(-verbose => 2 ) if ( $SHOW_MANUAL );

    if ( $SHOW_VERSION )
    {
        print "$0 Revision: $CONFIG{'version'}\n";
        exit;
    }
}
