#!/usr/bin/perl -w -I.

# ===========================================================================
# File:		yp
# Purpose:	Generator for a Yawns-Planet website.
# Created:	2005-10-12
#
# ===========================================================================
# (c) 2005 Steve Kemp <steve@steve.org.uk>
# This program is free software; you can redistribute it and/or modify 
# it under the terms of version 2 of the GNU General Public License as 
# published by the Free Software Foundation.  See the file COPYING for 
# further details.
# ===========================================================================
#
# $Id: yp,v 1.7 2005-10-12 12:39:40 steve Exp $

# Enforce good programming practices
use strict;

# Modules we use.
use HTML::Template;

# Custom modules
use conf::SiteConfig;
use Singleton::DBI;


#
#  1. Connect to the database
#
my $dbh = Singleton::DBI->instance();


#  2. Get weblog entries.
#
my @entries = getWeblogs( $dbh, get_conf( "count" ) );

#
#  3. Create output HTML
#
writeHTMLIndex( @entries );


#  4. Create output XML feeds.
#  4.1 - FIrst sanitize the entries.
# 


#
#  5. Disconnect from database.
#
$dbh->disconnect();




#
#  Return the relevent weblog entries from the database
#
sub getWeblogs
{
    my ( $dbh, $count ) = ( @_ );

    #
    # Execute the query
    #
    my $sql = $dbh->prepare( "SELECT id, username, title, bodytext, DATE(ondate), TIME( ondate ),comments FROM weblogs ORDER BY ondate DESC LIMIT 0,$count" );
    $sql->execute( );


    my $dataref = $sql->fetchall_arrayref;
    my $len = @$dataref;

    my $weblogs  = [];
    my $prevDate = '';

    for ( my $l = 0; $l < $len; $l++ ) 
    {
	my $entry = @$dataref[$l];
	my @entry = @$entry;


	#
	# 0 comments
	# 1 comment
	# 2 comments 
	# ..
	my $comments = $entry[6];
	my $plural = 1;
	if ( $comments eq 1 )
	{
	   $plural = 0;
	}
	
	#
	# Check for new date
	#
	my $new_date = 0;
	my $date     = $entry[4];
	my $time     = $entry[5];
	if ( $date ne $prevDate )
	{
	    $new_date = 1;
	}
	$prevDate = $date;


	#
	# Check for comments being disabled
	#
	my $comments_disabled = 0;
	if ( $comments <  0 )
	{
	    $comments_disabled = 1;
	}
	
	push ( @$weblogs,
	       {
		   id       => $entry[0],
		   user     => $entry[1],
		   title    => $entry[2],
		   body     => $entry[3],
		   date     => $date,
		   time     => $time,
		   comments => $comments,
		   disabled => $comments_disabled,
		   plural   => $plural,
		   new_date => $new_date,
	       } );
    }

    return( $weblogs );
}



#
#  Return the list of subscribed users.
#
sub getSubscriptions
{
    my ($dbh ) = Singleton::DBI->instance();

    #
    # Find the posters.
    #
    my $query = "SELECT DISTINCT a.realname,a.username FROM users AS a INNER JOIN weblogs AS b ON a.username = b.username";

    my $sql = $dbh->prepare( $query );
    $sql->execute();

    #
    # Get all the results.
    #
    my $dataref  = $sql->fetchall_arrayref();
    my @datalist = @$dataref;
    $sql->finish();

    # Data from the query
    my $user = ();
    my $subscriptions = [];

    foreach my $data ( @datalist )
    {
	my @user = @$data;

	#
	#  Find the data.
	#
	my $real_name = $user[0];
	my $user_name = $user[1];

	#
	# If the use has no real name set then use their account name.
	#
	if (! $real_name )
	{
	    $real_name = $user_name ;
	}

	push ( @$subscriptions,
	       {
		   account => $user_name,
		   fullname => $real_name
		   });

    }


    #
    # Sort the subscriptions appropriately.
    #
    @$subscriptions = sort sortByName @$subscriptions;

    return( $subscriptions );
}




#
# Sort a list of subscriptions by their username, case-insensitive.
#
sub sortByName()
{
    return( lc($::a->{'fullname'}) cmp lc($::b->{'fullname'}) );
}




#
#  Write the output index.html file
#
sub writeHTMLIndex 
{
    my ( @entries ) = ( @_ );

    #
    # Load the template.
    #
    my $template = HTML::Template->new( filename => "templates/index.tmpl" );

    #
    # Add the blogs and subscription information.
    #
    $template->param( 'blogs', @entries );
    $template->param( 'subscriptions', getSubscriptions( ) );

    #
    # Setup static parameters.
    #
    $template->param( 'title',      get_conf( 'title' ) );
    $template->param( 'title_link', get_conf( 'title_link' ) );

    open( OUTPUT, ">html/index.html" );
    print OUTPUT $template->output();
    close( OUTPUT );

}
