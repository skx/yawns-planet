#!/usr/bin/perl -w -I.

# ===========================================================================
# File:		yp
# Purpose:	Generator for a Yawns-Planet website.
# Created:	2005-10-12
#
# ===========================================================================
# (c) 2005 Steve Kemp <steve@steve.org.uk>
# This program is free software; you can redistribute it and/or modify 
# it under the terms of version 2 of the GNU General Public License as 
# published by the Free Software Foundation.  See the file COPYING for 
# further details.
# ===========================================================================
#
# $Id: yp,v 1.4 2005-10-12 12:11:41 steve Exp $

# Enforce good programming practices
use strict;

# Modules we use.
use HTML::Template;

# Custom modules
use conf::SiteConfig;
use Singleton::DBI;


#
#  1. Connect to the database
#
my $dbh = Singleton::DBI->instance();


#  2. Get weblog entries.
#
my @entries = getWeblogs( $dbh, get_conf( "count" ) );

#
#  3. Create output HTML
writeHTML(@entries);

#  4. Create output XML feeds.
# 
#  5. Disconnect from database.
#
$dbh->disconnect();




#
#  Return the relevent weblog entries from the database
#
sub getWeblogs
{
    my ( $dbh, $count ) = ( @_ );

    #
    # Execute Query:
    #
    # SELECT a.gid,a.id, a.username, a.title, a.bodytext, a.ondate, count(b.id)
    #  FROM weblogs AS a
    #    INNER JOIN comments AS b
    #      ON a.gid=b.root AND b.type='w' 
    #      GROUP by a.ondate DESC LIMIT 0,$count;
    #
    #  Hmmm comments are counted in the weblogs table too:
    #
    # SELECT gid, id, username, title, bodytext, ondate,comments
    #  FROM weblogs 
    #   ORDER BY ondate DESC LIMIT 0, $count
    #
    #

    my $sql = $dbh->prepare( "SELECT id, username, title, bodytext, ondate,comments FROM weblogs ORDER BY ondate DESC LIMIT 0,$count" );

    #
    # get required data
    #
    $sql->execute( );


    my $dataref = $sql->fetchall_arrayref;
    my $len = @$dataref;

    my $weblogs = [];
    
    for ( my $l = 0; $l < $len; $l++ ) 
    {
	my $entry = @$dataref[$l];
	my @entry = @$entry;


	push ( @$weblogs,
	       {
		   id       => $entry[0],
		   user     => $entry[1],
		   title    => $entry[2],
		   body     => $entry[3],
		   date     => $entry[4],
		   comments => $entry[5],
	       } );
    }

    return( $weblogs );
}


#
#  Return the list of subscribed users.
#
sub getSubscriptions
{
    my ($dbh ) = Singleton::DBI->instance();

    #
    # Find the posters.
    #
    my $query = "SELECT DISTINCT a.realname,a.username FROM users AS a INNER JOIN weblogs AS b ON a.username = b.username";

    my $sql = $dbh->prepare( $query );
    $sql->execute();

    #
    # Get all the results.
    #
    my $dataref  = $sql->fetchall_arrayref();
    my @datalist = @$dataref;
    $sql->finish();

    # Data from the query
    my $user = ();
    my $subscriptions = [];

    foreach my $data ( @datalist )
    {
	my @user = @$data;

	#
	#  Find the data.
	#
	my $real_name = $user[0];
	my $user_name = $user[1];

	if (! $real_name )
	{
	    $real_name = $user_name ;
	}

	push ( @$subscriptions,
	       {
		   account => $user_name,
		   fullname => $real_name
		   });

    }

    return( $subscriptions );
}


#
#
#
sub writeHTML 
{
    my ( @entries ) = ( @_ );

    my $template = HTML::Template->new( filename => "templates/index.tmpl" );

    $template->param( 'blogs', @entries );
    $template->param( 'subscriptions', getSubscriptions( ) );
    open( OUTPUT, ">html/index.html" );
    print OUTPUT $template->output();
    close( OUTPUT );

}
